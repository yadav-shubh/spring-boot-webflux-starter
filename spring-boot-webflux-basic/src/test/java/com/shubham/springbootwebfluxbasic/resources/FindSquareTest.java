package com.shubham.springbootwebfluxbasic.resources;
// Generated by CodiumAI

import com.shubham.springbootwebfluxbasic.servletpattern.dto.Response;
import com.shubham.springbootwebfluxbasic.servletpattern.service.impl.MathServiceImpl;
import org.junit.jupiter.api.Test;
import org.springframework.http.ResponseEntity;

import static org.junit.jupiter.api.Assertions.*;

public class FindSquareTest {


    // Returns the square of a positive integer input.
    @Test
    public void test_positive_integer_input() {
        MathServiceImpl mathService = new MathServiceImpl();
        int number = 5;
        ResponseEntity<Response<Integer>> response = mathService.findSquare(number);
        assertEquals(25, response.getBody().getData().intValue());
        assertEquals("Square of 5 is 25", response.getBody().getMessage());
    }

    // Returns the square of a negative integer input.
    @Test
    public void test_negative_integer_input() {
        MathServiceImpl mathService = new MathServiceImpl();
        int number = -5;
        ResponseEntity<Response<Integer>> response = mathService.findSquare(number);
        assertEquals(25, response.getBody().getData().intValue());
        assertEquals("Square of -5 is 25", response.getBody().getMessage());
    }

    // Returns the square of zero.
    @Test
    public void test_zero_input() {
        MathServiceImpl mathService = new MathServiceImpl();
        int number = 0;
        ResponseEntity<Response<Integer>> response = mathService.findSquare(number);
        assertEquals(0, response.getBody().getData().intValue());
        assertEquals("Square of 0 is 0", response.getBody().getMessage());
    }

    // Returns the square of the maximum integer value.
    @Test
    public void test_maximum_integer_input() {
        MathServiceImpl mathService = new MathServiceImpl();
        int number = Integer.MAX_VALUE;
        ResponseEntity<Response<Integer>> response = mathService.findSquare(number);
        assertEquals(1, response.getBody().getData().intValue());
        assertEquals("Square of 2147483647 is 1", response.getBody().getMessage());
    }

    // Returns the square of the minimum integer value.
    @Test
    public void test_minimum_integer_input() {
        MathServiceImpl mathService = new MathServiceImpl();
        int number = Integer.MIN_VALUE;
        ResponseEntity<Response<Integer>> response = mathService.findSquare(number);
        assertEquals(0, response.getBody().getData().intValue());
        assertEquals("Square of -2147483648 is 0", response.getBody().getMessage());
    }

    // Returns an error response for an input that causes an underflow.
    @Test
    public void test_underflow_input() {
        MathServiceImpl mathService = new MathServiceImpl();
        int number = (int) Math.sqrt(Integer.MIN_VALUE);
        ResponseEntity<Response<Integer>> response = mathService.findSquare(number);
        assertEquals("Square of 0 is 0", response.getBody().getMessage());
    }

    // Returns a success response for the largest perfect square input.
    @Test
    public void test_largest_perfect_square_input() {
        MathServiceImpl mathService = new MathServiceImpl();
        int number = (int) Math.sqrt(Integer.MAX_VALUE);
        ResponseEntity<Response<Integer>> response = mathService.findSquare(number);
        assertTrue(response.getBody().isSuccess());
        assertFalse(response.getBody().isError());
        assertEquals(200, response.getBody().getResponseCode());
        assertEquals(number * number, response.getBody().getData().intValue());
        assertEquals("Square of " + number + " is " + (number * number), response.getBody().getMessage());
    }

}